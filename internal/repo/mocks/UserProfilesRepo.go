// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/adesupraptolaia/user_login/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserProfilesRepo is an autogenerated mock type for the UserProfilesRepo type
type UserProfilesRepo struct {
	mock.Mock
}

// CreateUserProfile provides a mock function with given fields: _a0
func (_m *UserProfilesRepo) CreateUserProfile(_a0 entity.UserProfile) (*entity.UserProfile, error) {
	ret := _m.Called(_a0)

	var r0 *entity.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.UserProfile) (*entity.UserProfile, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.UserProfile) *entity.UserProfile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.UserProfile) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserProfile provides a mock function with given fields: _a0
func (_m *UserProfilesRepo) DeleteUserProfile(_a0 string) (*entity.UserProfile, error) {
	ret := _m.Called(_a0)

	var r0 *entity.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.UserProfile, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.UserProfile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: _a0
func (_m *UserProfilesRepo) GetUserProfile(_a0 string) (*entity.UserProfile, error) {
	ret := _m.Called(_a0)

	var r0 *entity.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.UserProfile, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.UserProfile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: _a0
func (_m *UserProfilesRepo) UpdateUserProfile(_a0 entity.UserProfile) (*entity.UserProfile, error) {
	ret := _m.Called(_a0)

	var r0 *entity.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.UserProfile) (*entity.UserProfile, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.UserProfile) *entity.UserProfile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.UserProfile) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserProfilesRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserProfilesRepo creates a new instance of UserProfilesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserProfilesRepo(t mockConstructorTestingTNewUserProfilesRepo) *UserProfilesRepo {
	mock := &UserProfilesRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
