// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/adesupraptolaia/user_login/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepo is an autogenerated mock type for the AuthRepo type
type AuthRepo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *AuthRepo) CreateUser(_a0 entity.User) (*entity.User, error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.User) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.User) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *AuthRepo) DeleteUser(_a0 string) (*entity.User, error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepo creates a new instance of AuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepo(t mockConstructorTestingTNewAuthRepo) *AuthRepo {
	mock := &AuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
